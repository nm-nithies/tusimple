import torch
import torch.nn as nn

# Define the PyTorch model with three Add operations
class ThreeAddModel(nn.Module):
    def __init__(self):
        super(ThreeAddModel, self).__init__()
        
    def forward(self, x, y, z):
        # First add operation
        out1 = torch.add(x, y)
        # Second add operation
        out2 = torch.add(out1, z)
        # Third add operation
        out3 = torch.add(out2, x)
        
        return out3

# Instantiate the model
model = ThreeAddModel()

# Set the model to evaluation mode
model.eval()

# Create some sample input tensors
x = torch.tensor([1.0, 2.0, 3.0], dtype=torch.float32)
y = torch.tensor([4.0, 5.0, 6.0], dtype=torch.float32)
z = torch.tensor([7.0, 8.0, 9.0], dtype=torch.float32)

# Define a dummy input tuple for export
dummy_input = (x, y, z)

# Export the model to ONNX
torch.onnx.export(
    model,                      # The model to be exported
    dummy_input,                # The model's input (example inputs)
    "three_add_model.onnx",     # The filename of the output ONNX model
    input_names=["x", "y", "z"], # Name the input nodes
    output_names=["out"],        # Name the output node
    opset_version=11,            # ONNX opset version to export to (11 is widely supported)
    dynamic_axes={
        'x': {0: 'batch_size'}, 
        'y': {0: 'batch_size'}, 
        'z': {0: 'batch_size'}, 
        'out': {0: 'batch_size'}
    }  # Allows dynamic input sizes (batch_size)
)

print("Model has been successfully converted to ONNX.")







import torch
import torch.nn as nn

class ConcatShapeTransposeModel(nn.Module):
    def __init__(self):
        super(ConcatShapeTransposeModel, self).__init__()

    def forward(self, x, y):
        # Concat operation (along dimension 1)
        concat_result = torch.cat((x, y), dim=1)

        # Shape operation (simulate by extracting shape)
        shape_result = concat_result.shape  # Not an actual tensor operation, but simulates shape extraction.

        # Transpose operation (swap dimensions 1 and 2)
        transpose_result = concat_result.transpose(1, 2)

        return transpose_result

# Create some sample tensors
x = torch.randn(2, 3, 4)  # Shape: [batch_size, channels, width]
y = torch.randn(2, 3, 4)  # Shape: [batch_size, channels, width]

# Instantiate the model
model = ConcatShapeTransposeModel()

# Forward pass
output = model(x, y)
print(output)


# Export the PyTorch model to ONNX
dummy_input_1 = torch.randn(2, 3, 4)
dummy_input_2 = torch.randn(2, 3, 4)

torch.onnx.export(
    model,                               # The model to export
    (dummy_input_1, dummy_input_2),      # Model inputs
    "concat_shape_transpose_model.onnx", # Output file
    input_names=["input1", "input2"],    # Input tensor names
    output_names=["output"],             # Output tensor name
    opset_version=11                     # ONNX opset version
)

print("Model exported to ONNX.")


import torch
import torch.nn as nn

class InstanceNormModel(nn.Module):
    def __init__(self):
        super(InstanceNormModel, self).__init__()
        # Instance normalization layer
        self.instance_norm = nn.InstanceNorm2d(3, affine=True)  # For 2D input with 3 channels

    def forward(self, x):
        # Apply instance normalization
        return self.instance_norm(x)

# Create a sample input tensor
input_tensor = torch.randn(1, 3, 224, 224)  # Batch size = 1, Channels = 3, Height = 224, Width = 224

# Instantiate the model
model = InstanceNormModel()

# Forward pass
output = model(input_tensor)
print(output.shape)

# Export the PyTorch model to ONNX
dummy_input = torch.randn(1, 3, 224, 224)  # Input tensor for the model

torch.onnx.export(
    model,                                # The model to export
    dummy_input,                          # Model input
    "instance_norm_model.onnx",           # Output ONNX file
    input_names=["input"],                # Input tensor name
    output_names=["output"],              # Output tensor name
    opset_version=11                      # ONNX opset version
)

print("Model exported to ONNX.")


import torch
import torch.nn as nn
import torch.onnx

class ConcatShapeTransposeModel(nn.Module):
    def __init__(self):
        super(ConcatShapeTransposeModel, self).__init__()

    def forward(self, input1, input2):
        # 1. Add the inputs
        add_result = input1 + input2
        
        # 2. Concatenate the result along axis 1
        concat_result = torch.cat((add_result, input2), dim=1)
        
        # 3. Shape operation - extract the shape, mimicking the ONNX Shape op
        shape_result = concat_result.shape[1:3]  # Equivalent to extracting shape

        # 4. Transpose operation - swap dimensions 1 and 2
        transpose_result = concat_result.permute(0, 2, 1)

        # 5. Add a constant tensor (for example, a tensor of ones with the same shape as transpose_result)
        add_after_transpose_result = transpose_result + torch.ones_like(transpose_result)

        return shape_result, add_after_transpose_result

# Instantiate the model
model = ConcatShapeTransposeModel()

# Create dummy input tensors
input1 = torch.randn(1, 3, 4)
input2 = torch.randn(1, 3, 4)

# Export the model to ONNX
torch.onnx.export(model, (input1, input2), "concat_shape_transpose_model.onnx",
                  input_names=['input1', 'input2'],
                  output_names=['shape_result', 'add_after_transpose_result'],
                  opset_version=13)

print("ONNX model has been exported.")
