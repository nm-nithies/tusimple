import torch
import torch.nn as nn
import torch.onnx

class SimpleModel(nn.Module):
    def __init__(self):
        super(SimpleModel, self).__init__()
        self.softmax = nn.Softmax(dim=1)

    def forward(self, x, y):
        # Add operation
        add_result = x + y
        
        # Subtract with constant 0.5
        sub_result = add_result - 0.5
        
        # Divide with constant 0.2
        div_result = sub_result / 0.2
        
        # Reshape operation
        reshape_result = div_result.view(div_result.size(0), -1)
        
        # Softmax operation
        output = self.softmax(reshape_result)
        return output

# Create a model instance
model = SimpleModel()

# Dummy input tensors
x = torch.randn(1, 3, 28, 28)
y = torch.randn(1, 3, 28, 28)

# Perform a forward pass to test the model
output = model(x, y)
print("Model output:", output)

# Export the model to ONNX format
torch.onnx.export(
    model,                        # Model being run
    (x, y),                       # Model input (dummy inputs for export)
    "simple_model_with_constants.onnx",  # File name to export the model
    export_params=True,           # Store trained parameters
    opset_version=12,             # ONNX opset version
    do_constant_folding=True,     # Fold constant values for optimization
    input_names=['input_x', 'input_y'],  # Input names
    output_names=['output'],      # Output names
    dynamic_axes={'input_x': {0: 'batch_size'},  # Dynamic axes for input
                  'input_y': {0: 'batch_size'},
                  'output': {0: 'batch_size'}}   # Dynamic axes for output
)

print("Model exported to simple_model_with_constants.onnx")
