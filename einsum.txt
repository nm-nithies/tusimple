LogicalResult matchAndRewrite(
    ONNXSubOp subOp, PatternRewriter &rewriter) const final {

  Location odsLoc = subOp.getLoc();
  onnx_mlir::MultiDialectBuilder<onnx_mlir::OnnxBuilder> create(rewriter, odsLoc);

  // First, match if the sub and div operations form a BatchNorm pattern
  ONNXDivOp divOp;
  if (!isSubDivBatchNormMatched(subOp, divOp)) {
    cout << "643";
    return failure();
  }

  // Extract the inputs and bias values from the Sub and Div operations
  Value input = subOp.getOperand(0);
  Value biasValue = divOp.getOperand(1);

  // Prepare the axis vector and scale vector
  SmallVector<int64_t, 4> axisVec;  // Fill this with appropriate axes for the scale
  SmallVector<float, 4> scaleVec;   // This will be populated with scale values

  // Extract scaleValue from subOp's second operand
  Value scaleValue = subOp.getOperand(1);

  // Call the getScaleValue function to extract the scale values based on axis
  if (failed(getScaleValue(rewriter, subOp, axisVec, scaleVec, scaleValue))) {
    cout << "Failed to extract scale values";
    return failure();
  }

  // At this point, scaleVec contains the correct scale values

  // Define epsilon and momentum attributes for BatchNormalization
  FloatAttr epsilonAttr = rewriter.getF32FloatAttr(1e-5f); 
  FloatAttr momentumAttr = rewriter.getF32FloatAttr(0.9f);

  // Define output type (assuming same as input type)
  SmallVector<Type, 1> outputTypes;
  outputTypes.emplace_back(input.getType());

  // Create the BatchNormalization operation
  auto bnOp = rewriter.create<ONNXBatchNormalizationInferenceModeOp>(
      subOp.getLoc(), outputTypes, input, scaleValue, biasValue, scaleValue, biasValue, epsilonAttr, momentumAttr);

  // Replace the original DivOp with the BatchNormOp
  rewriter.replaceOp(divOp, bnOp.getResult());
  // Erase the SubOp as it is now fused into the BatchNorm
  rewriter.eraseOp(subOp);

  cout << "689689";
  return success();
}
