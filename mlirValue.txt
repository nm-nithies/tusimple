The C++ code rewrites ONNXSumOp during MLIR transformation, handling sums with multiple inputs. The Python code replaces Sum with Add operations in a computational graph only when there are exactly two inputs. Although both transform Sum to Add, they operate in different contexts and have different input constraints.

SumToAddPattern
ReplaceSum

4. Pattern Matching
C++ Pass:

The C++ pass uses low-level pattern matching via functions like operandOfOpDefinedBy<ONNXDivOp> to traverse and identify the desired sequence of operations in the IR.
The C++ pass can finely control each operation, ensuring that operations like Mul, Div, Sqrt, and others are matched precisely.
Python Pass:

A Python pass would use a higher-level pattern matching approach. For example, it might use graph traversal techniques to inspect the nodes in the computational graph, looking for patterns like ReduceMean, Sub, Mul, and Sqrt.
Pattern matching in Python is often easier to express due to dynamic typing and flexibility, but it may not be as performant or as precise as the C++ version.
5. Rewrite and Replacement Mechanism
C++ Pass:

Uses PatternRewriter for efficient replacement of operations in the IR, with low-level control over the newly created operations (onnx.layerNorm or onnx.RMSLayerNorm).
The MultiDialectBuilder<OnnxBuilder> helps construct new ONNX operations, making the rewriting process efficient and integrated with MLIR.
Python Pass:

The rewriting mechanism in Python would likely involve modifying the nodes in the graph directly and replacing matched subgraphs with new subgraphs.
The abstraction level is higher, and the performance impact could be more significant depending on the graph manipulation library used.


RecomposeLayerNormFromMulPattern
FusePrimitivesIntoLayerNorm
