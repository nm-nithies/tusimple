
mlir::Value createFloatTensorConstant(mlir::OpBuilder &builder, mlir::Location loc, float value) {
    auto elementType = builder.getF32Type();
    auto tensorType = mlir::RankedTensorType::get({}, elementType); 
    auto denseAttr = mlir::DenseElementsAttr::get(tensorType, llvm::ArrayRef<float>(&value, 1));
    return builder.create<mlir::arith::ConstantOp>(loc, tensorType, denseAttr).getResult();
}


../src/Dialect/ONNX/Transforms/temp.cpp: In function 'mlir::Value {anonymous}::createFloatTensorConstant(mlir::OpBuilder&, mlir::Location, float)':
../src/Dialect/ONNX/Transforms/temp.cpp:688:54: error: cannot call member function 'mlir::Value onnx_mlir::OnnxBuilder::constant(mlir::Attribute) const' without object
  688 |     return onnx_mlir::OnnxBuilder::constant(denseAttr).getResult();
      |                                                      ^
../src/Dialect/ONNX/Transforms/temp.cpp: At global scope:

cpp.o -c ../src/Dialect/ONNX/Transforms/temp.cpp
../src/Dialect/ONNX/Transforms/temp.cpp: In function 'mlir::Value {anonymous}::createFloatTensorConstant(mlir::OpBuilder&, mlir::Location, float)':
../src/Dialect/ONNX/Transforms/temp.cpp:688:74: error: cannot call constructor 'mlir::arith::ConstantOp::ConstantOp' directly [-fpermissive]
  688 |     return mlir::arith::ConstantOp::ConstantOp(loc, tensorType, denseAttr).getResult();
      |                                                                          ^
../src/Dialect/ONNX/Transforms/temp.cpp:688:74: note: for a function-style cast, remove the redundant '::ConstantOp'
../src/Dialect/ONNX/Transforms/temp.cpp:688:74: error: no matching function for call to 'mlir::arith::ConstantOp::ConstantOp(mlir::Location&, mlir::RankedTensorType&, mlir::DenseElementsAttr&)'
In file included from /workspace/ONNX_MLIR/llvm-project/mlir/include/mlir/IR/Matchers.h:20,



./src/Dialect/ONNX/ONNXOps.cpp.inc:3863: static void mlir::ONNXBatchNormalizationInferenceModeOp::build(mlir::OpBuilder&, mlir::OperationState&, mlir::TypeRange, mlir::Value, mlir::Value, mlir::Value, mlir::Value, mlir::Value, llvm::APFloat, llvm::APFloat): Assertion `resultTypes.size() == 1u && "mismatched number of results"' failed.

[1/6] Wed Oct 23 16:32:59 2024 (0s) Importing ONNX Model to MLIR Module from "new_sub_div_tensor5.onnx"
[2/6] Wed Oct 23 16:32:59 2024 (0s) Compiling and Optimizing MLIR Module
loc("/Sub"): error: Wrong rank for the scale
loc("/Sub"): error: 'onnx.BatchNormalizationInferenceMode' op shape inference failed
[3/6] Wed Oct 23 16:32:59 2024 (0s) Compilation completed



struct SubDivFuseBatchNormPattern : public OpRewritePattern<ONNXSubOp> {
  using OpRewritePattern<ONNXSubOp>::OpRewritePattern;

  LogicalResult matchAndRewrite(
      ONNXSubOp subOp, PatternRewriter &rewriter) const final {

    Location odsLoc = subOp.getLoc();
    onnx_mlir::MultiDialectBuilder<onnx_mlir::OnnxBuilder> create(
        rewriter, odsLoc);
    ONNXDivOp divOp;
    if (!isSubDivBatchNormMatched(subOp, divOp))
     { cout<<"643";
      return failure();}
    
    Value input = subOp.getOperand(0);
    Value scaleValue = subOp.getOperand(1);
    Value biasValue = divOp.getOperand(1);
   
    FloatAttr epsilonAttr = rewriter.getF32FloatAttr(1e-5f); 
    FloatAttr momentumAttr =  rewriter.getF32FloatAttr(0.9);


    cout<<"679679";
    
    SmallVector<Type, 1> outputTypes;
    outputTypes.emplace_back(input.getType());
 
    

    auto bnOp = rewriter.create<ONNXBatchNormalizationInferenceModeOp>(
        subOp.getLoc(),outputTypes,input,
        scaleValue, biasValue, scaleValue, biasValue, epsilonAttr, momentumAttr);  // epsilon
        
    rewriter.replaceOp(divOp, bnOp.getResult());
    rewriter.eraseOp(subOp);

    cout<<"689689";
    return success();


  }
};




    mlir::ElementsAttr elementsAttr = onnx_mlir::getElementAttributeFromONNXValue(scaleValue);
    onnx_mlir::ArrayBuffer<float> Scale_Values = onnx_mlir::getElementsArray<float>(elementsAttr);



// Get the pointer to the start of the buffer
const float* scaleIter = Scale_Values.get().begin();
size_t bufferSize = Scale_Values.get().size();

// Print the values in the buffer
for (size_t i = 0; i < bufferSize; ++i) {
    std::cout << "Scale Value " << i << ": " << scaleIter[i] << std::endl;
}


onnx-mlir: /workspace/ONNX_MLIR/llvm-project/llvm/include/llvm/Support/Casting.h:656: decltype(auto) llvm::dyn_cast(From&) [with To = mlir::DisposableElementsAttr; From = mlir::ElementsAttr]: Assertion `detail::isPresent(Val) && "dyn_cast on a non-existent value"' failed.
Aborted (core dumped)
