ERROR: Ignored the following versions that require a different python version: 8.0.0 Requires-Python >=3.10; 8.0.0rc1 Requires-Python >=3.10; 8.0.1 Requires-Python >=3.10; 8.0.2 Requires-Python >=3.10; 8.1.0 Requires-Python >=3.10; 8.1.1 Requires-Python >=3.10; 8.1.2 Requires-Python >=3.10; 8.1.3 Requires-Python >=3.10
ERROR: Could not find a version that satisfies the requirement waymo-open-dataset-tf-2-1-0 (from versions: none)
ERROR: No matching distribution found for waymo-open-dataset-tf-2-1-0


+ PARTITION=1
+ JOB_NAME=1
+ CONFIG=configs/fastbev/exp/paper/fastbev_m0_r18_s256x704_v200x200x4_c192_d2_f4.py
+ GPUS=1
+ GPUS_PER_NODE=1
+ CPUS_PER_TASK=5
+ QUOTATYPE=auto
/workspace/Fast-BEV/tools/slurm_eval.sh: 12: Bad substitution
#!/usr/bin/env bash

set -x

PARTITION=$1
JOB_NAME=$2
CONFIG=$3
GPUS=${GPUS:-1}
GPUS_PER_NODE=${GPUS_PER_NODE:-8}
CPUS_PER_TASK=${CPUS_PER_TASK:-5}
QUOTATYPE=${QUOTATYPE:-"auto"}
PY_ARGS=${@:4}
SRUN_ARGS=${SRUN_ARGS:-""}

++ dirname ./slurm_eval.sh
+ PYTHONPATH=./..:
+ srun -p 1 --job-name=fastbev_m0_r18_s256x704_v200x200x4_c192_d2_f4 --quotatype=auto --gres=gpu:1 --ntasks=1 --ntasks-per-node=1 --cpus-per-task=5 --kill-on-bad-exit=1 -s python -u tools/eval.py configs/fastbev/exp/paper/fastbev_m0_r18_s256x704_v200x200x4_c192_d2_f4.py --launcher=slurm --out work_dirs/fastbev/exp/paper/fastbev_m0_r18_s256x704_v200x200x4_c192_d2_f4/results/results.pkl --eval bbox
./slurm_eval.sh: line 15: srun: command not found




https://download.openmmlab.com/mmcv/dist/cu118/torch1.13.1/index.html


# Install mmcv from source
RUN git clone https://github.com/open-mmlab/mmcv.git && \
    cd mmcv && \
    git checkout v1.5.0 && \
    pip install -r requirements/optional.txt && \
    MMCV_WITH_OPS=1 pip install -e . && \
    cd .. && rm -rf mmcv








ARG CUDA_VERSION=11.8.0
ARG OS_VERSION=20.04

FROM nvidia/cuda:${CUDA_VERSION}-cudnn8-devel-ubuntu${OS_VERSION}
LABEL maintainer="NVIDIA CORPORATION"

ENV TRT_VERSION 8.5.3.1
SHELL ["/bin/bash", "-c"]

# Setup user account
ARG uid=1001
ARG gid=1001
RUN groupadd -r -f -g ${gid} trtuser && useradd -o -r -l -u ${uid} -g ${gid} -ms /bin/bash trtuser
RUN usermod -aG sudo trtuser
RUN echo 'trtuser:nvidia' | chpasswd
RUN mkdir -p /workspace && chown trtuser /workspace

# Required to build Ubuntu 20.04 without user prompts with DLFW container
ENV DEBIAN_FRONTEND=noninteractive

# Update CUDA signing key
RUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/3bf863cc.pub

# Install requried libraries
RUN apt-get update && apt-get install -y --no-install-recommends \
    git-lfs sudo software-properties-common python3-venv gpg-agent \
    && add-apt-repository -y ppa:deadsnakes/ppa \
    && apt-get update \
    && apt-get install -y --no-install-recommends python3.8 python3.8-dev python3.8-venv \
    && apt-get install -y liblapack-dev \
    && apt-get install -y curl vim nano patch wget cmake gcc g++ \
    && apt-get install -y libgl1-mesa-glx \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

RUN add-apt-repository ppa:ubuntu-toolchain-r/test
RUN apt-get update && apt-get install -y --no-install-recommends \
    libcurl4-openssl-dev \
    wget \
    git \
    pkg-config \
    sudo \
    ssh \
    libssl-dev \
    pbzip2 \
    pv \
    bzip2 \
    unzip \
    devscripts \
    lintian \
    fakeroot \
    dh-make \
    build-essential

# Install python3
RUN apt-get install -y --no-install-recommends \
      python3 \
      python3-pip \
      python3-dev \
      python3-wheel &&\
    cd /usr/local/bin &&\
    ln -s /usr/bin/python3 python &&\
    ln -s /usr/bin/pip3 pip;

# # Install TensorRT
# RUN if [ "${CUDA_VERSION}" = "10.2" ] ; then \
#     v="${TRT_VERSION%.*}-1+cuda${CUDA_VERSION}" &&\
#     apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/3bf863cc.pub &&\
#     apt-get update &&\
#     sudo apt-get install libnvinfer8=${v} libnvonnxparsers8=${v} libnvparsers8=${v} libnvinfer-plugin8=${v} \
#         libnvinfer-dev=${v} libnvonnxparsers-dev=${v} libnvparsers-dev=${v} libnvinfer-plugin-dev=${v} \
#         python3-libnvinfer=${v}; \
# else \
#     v="${TRT_VERSION%.*}-1+cuda${CUDA_VERSION%.*}" &&\
#     apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/3bf863cc.pub &&\
#     apt-get update &&\
#     sudo apt-get install libnvinfer8=${v} libnvonnxparsers8=${v} libnvparsers8=${v} libnvinfer-plugin8=${v} \
#         libnvinfer-dev=${v} libnvonnxparsers-dev=${v} libnvparsers-dev=${v} libnvinfer-plugin-dev=${v} \
#         python3-libnvinfer=${v}; \
# fi

# Install PyPI packages
RUN pip3 install --upgrade pip
RUN pip3 install setuptools>=41.0.0

# Install Cmake
RUN cd /tmp && \
    wget https://cmake.org/files/v3.14/cmake-3.14.4-Linux-x86_64.sh && \
    chmod +x cmake-3.14.4-Linux-x86_64.sh && \
    ./cmake-3.14.4-Linux-x86_64.sh --prefix=/usr/local --exclude-subdir --skip-license && \
    rm ./cmake-3.14.4-Linux-x86_64.sh

# Download NGC client
# Changed the command, For more information please refer: https://github.com/NVIDIA/TensorRT/issues/3721
# ORIGINAL: RUN cd /usr/local/bin && wget https://ngc.nvidia.com/downloads/ngccli_cat_linux.zip && unzip ngccli_cat_linux.zip && chmod u+x ngc-cli/ngc && rm ngccli_cat_linux.zip ngc-cli.md5 && echo "no-apikey\nascii\n" | ngc-cli/ngc config set
# MODIFIED:  
RUN cd /usr/local/bin && wget https://ngc.nvidia.com/downloads/ngccli_cat_linux.zip && unzip ngccli_cat_linux.zip && chmod u+x ngc-cli/ngc && rm ngccli_cat_linux.zip ngc-cli.md5
# echo "no-apikey\nascii\n" | ngc-cli/ngc config set

# Install PyTorch
RUN pip3 install torch==1.12.1+cu116 torchvision==0.13.1+cu116 --extra-index-url https://download.pytorch.org/whl/cu116 --extra-index-url https://pypi.tuna.tsinghua.edu.cn/simple

COPY requirement.txt /tmp/requirement.txt
RUN pip3 install -r /tmp/requirement.txt

RUN pip install mmdet==2.14.0 
RUN pip install mmsegmentation==0.14.1
# ENV HTTPS_PROXY "http://127.0.0.1:20171"

# Install MMLab
# ARG TORCH_CUDA_ARCH_LIST="7.5;6.1;8.6"
# ENV FORCE_CUDA="1"

RUN cd / && \
    git clone https://github.com/open-mmlab/mmcv.git && \
    cd mmcv && git checkout v1.4.0 && \
    pip3 install -r requirements/docs.txt && \
    pip3 install -r requirements/runtime.txt && \
    pip3 install -r requirements/test.txt && \
    MMCV_WITH_OPS=1 pip3 install -e .

# RUN cd / && \
#     git clone https://github.com/open-mmlab/mmdetection.git && \
#     cd mmdetection && git checkout v2.25.1 && \
#     pip3 install -v -e .

RUN wget https://github.com/microsoft/onnxruntime/releases/download/v1.8.1/onnxruntime-linux-x64-1.8.1.tgz && \
    tar -zxvf onnxruntime-linux-x64-1.8.1.tgz && \ 
    cd onnxruntime-linux-x64-1.8.1 && \
    export ONNXRUNTIME_DIR=$(pwd) && \
    echo "ONNXRUNTIME_DIR= " ${ONNXRUNTIME_DIR} && \
    export LD_LIBRARY_PATH=$ONNXRUNTIME_DIR/lib:$LD_LIBRARY_PATH

ENV ONNXRUNTIME_DIR=${ONNXRUNTIME_DIR}/onnxruntime-linux-x64-1.8.1
ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${ONNXRUNTIME_DIR}"  

# RUN cd / && \
#     git clone https://github.com/open-mmlab/mmdeploy.git && \
#     cd mmdeploy && git checkout v0.10.0 && \
#     git clone https://github.com/NVIDIA/cub.git third_party/cub && \
#     cd third_party/cub && git checkout c3cceac115 && cd .. && \
#     git clone https://github.com/pybind/pybind11.git pybind11 && \
#     cd pybind11 && git checkout 70a58c5 && \
#     cd /mmdeploy && mkdir -p build && cd build && \
#     cmake -DCMAKE_CXX_COMPILER=g++ -DMMDEPLOY_TARGET_BACKENDS=ort -DTENSORRT_DIR=/usr -DCUDNN_DIR=/usr/local/cuda .. && \
#     make -j$(nproc) && \
#     make install && \
#     cd /mmdeploy && pip3 install -v -e .

    
    # Install onnx packages
    RUN pip3 install -U onnx==1.14.1 
    RUN pip3 install -U onnxruntime-gpu==1.14.0 
    RUN pip3 install -U onnx-simplifier==0.4.33 
    RUN pip3 install -U numpy==1.21.6
    RUN pip3 install --no-cache-dir cmake=="3.18.4"
    # RUN pip3 install -U spo4onnx
    # RUN pip3 install tqdm==4.66.1 
    # RUN pip3 install -U onnx_graphsurgeon --index-url https://pypi.ngc.nvidia.com

# Set environment and working directory
ENV TRT_LIBPATH /usr/lib/x86_64-linux-gnu
ENV PATH="${PATH}:/usr/local/bin/ngc-cli"
ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${TRT_OSSPATH}/build/out:${TRT_LIBPATH}"
WORKDIR /workspace


RUN ["/bin/bash"]
