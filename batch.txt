import torch
import torch.nn as nn

class OnlyBatchNorm(nn.Module):
    def __init__(self):
        super(OnlyBatchNorm, self).__init__()
        self.bn = nn.BatchNorm1d(100)  # BatchNorm applied to 100 features

    def forward(self, x):
        x = self.bn(x)  # Apply BatchNorm directly to input
        return x

# Instantiate the model
model = OnlyBatchNorm()

# Set the model to evaluation mode (important for exporting BatchNorm correctly)
model.eval()

# Create dummy input for the model (e.g., batch size of 10, 100 features)
dummy_input = torch.randn(10, 100)  # Batch size of 10, 100 features

# Export the model to ONNX format
onnx_path = "batchnorm_model.onnx"
torch.onnx.export(
    model,                            # PyTorch model
    dummy_input,                      # Input to the model
    onnx_path,                        # Where to save the ONNX model
    export_params=True,               # Store the trained parameter weights inside the model
    opset_version=12,                 # ONNX version to export the model to
    input_names=['input'],            # Input names
    output_names=['output'],          # Output names
    dynamic_axes={'input': {0: 'batch_size'}, 'output': {0: 'batch_size'}}  # Variable length axes for batch size
)

print(f"ONNX model exported to {onnx_path}")





import onnx
from onnx import helper, TensorProto
import numpy as np

# Define input and output shapes
input_shape = [1, 256, 768]
input_name = "input"
output_name = "output"
gamma_name = "gamma"
beta_name = "beta"

# Create input tensor
input_tensor = helper.make_tensor_value_info(input_name, TensorProto.FLOAT, input_shape)
output_tensor = helper.make_tensor_value_info(output_name, TensorProto.FLOAT, input_shape)

# Create gamma and beta tensors (parameters for LayerNormalization)
gamma = np.ones(input_shape[-1], dtype=np.float32)  # Scale factor
gamma_initializer = helper.make_tensor(
    name=gamma_name,
    data_type=TensorProto.FLOAT,
    dims=[input_shape[-1]],
    vals=gamma.flatten().tolist(),
)

beta = np.zeros(input_shape[-1], dtype=np.float32)  # Bias factor
beta_initializer = helper.make_tensor(
    name=beta_name,
    data_type=TensorProto.FLOAT,
    dims=[input_shape[-1]],
    vals=beta.flatten().tolist(),
)

# Create LayerNormalization node
layernorm_node = helper.make_node(
    "LayerNormalization",  # Operation name
    inputs=[input_name, gamma_name, beta_name],
    outputs=[output_name],
    name="LayerNorm"
)

# Build the graph
graph = helper.make_graph(
    nodes=[layernorm_node],
    name="LayerNormGraph",
    inputs=[input_tensor],
    outputs=[output_tensor],
    initializer=[gamma_initializer, beta_initializer]
)

# Create the model
model = helper.make_model(graph, producer_name="onnx-layernorm-example")

# Save the model to a file
onnx.save(model, "layernorm_1x256x768.onnx")

print("ONNX model with LayerNormalization created and saved as 'layernorm_1x256x768.onnx'")


