import torch
import torch.nn as nn

class OnlyBatchNorm(nn.Module):
    def __init__(self):
        super(OnlyBatchNorm, self).__init__()
        self.bn = nn.BatchNorm1d(100)  # BatchNorm applied to 100 features

    def forward(self, x):
        x = self.bn(x)  # Apply BatchNorm directly to input
        return x

# Instantiate the model
model = OnlyBatchNorm()

# Set the model to evaluation mode (important for exporting BatchNorm correctly)
model.eval()

# Create dummy input for the model (e.g., batch size of 10, 100 features)
dummy_input = torch.randn(10, 100)  # Batch size of 10, 100 features

# Export the model to ONNX format
onnx_path = "batchnorm_model.onnx"
torch.onnx.export(
    model,                            # PyTorch model
    dummy_input,                      # Input to the model
    onnx_path,                        # Where to save the ONNX model
    export_params=True,               # Store the trained parameter weights inside the model
    opset_version=12,                 # ONNX version to export the model to
    input_names=['input'],            # Input names
    output_names=['output'],          # Output names
    dynamic_axes={'input': {0: 'batch_size'}, 'output': {0: 'batch_size'}}  # Variable length axes for batch size
)

print(f"ONNX model exported to {onnx_path}")





import torch
import torch.nn as nn

# Define the model with only LayerNorm
class LayerNormModel(nn.Module):
    def __init__(self, normalized_shape):
        super(LayerNormModel, self).__init__()
        self.layer_norm = nn.LayerNorm(normalized_shape)

    def forward(self, x):
        return self.layer_norm(x)

# Initialize the model
input_shape = (1, 256, 768)
normalized_shape = input_shape[2]
model = LayerNormModel(normalized_shape)

# Create a dummy input
dummy_input = torch.randn(input_shape)

# Export the model to ONNX
onnx_file_path = "layernorm_model.onnx"
torch.onnx.export(
    model,                     # The model to be exported
    dummy_input,               # A dummy input for the model
    onnx_file_path,            # Filepath to save the ONNX model
    input_names=["input"],     # Name of the input node
    output_names=["output"],   # Name of the output node
    opset_version=13,          # ONNX opset version
    dynamic_axes={             # Allow for dynamic axes if needed
        "input": {0: "batch_size"},
        "output": {0: "batch_size"}
    }
)

print(f"Model exported to {onnx_file_path}")

