
def get_Swish_primitive_nodes():
    nodes = [
        helper.make_node("Sigmoid", ["X"], ["sig_x"]),
        helper.make_node("Mul", ["X", "sig_x"], ["Y"]),
    ]
    return nodes


def get_Swish_primitive_nodes_with_beta():
    nodes = [
        helper.make_node("Mul", ["X", "beta"], ["mul_1"]),
        helper.make_node("Sigmoid", ["mul_1"], ["sig_x"]),
        helper.make_node("Mul", ["X", "sig_x"], ["Y"]),
    ]
    return nodes


def get_local_function_swish(opset_v=13, with_beta=False):
    if with_beta:
        docstr = "Swish y = x * sigmoid(x*beta) implemented by onnx local function."
    else:
        docstr = "Swish y = x * sigmoid(x) implemented by onnx local function."
    func_domain = "snps.onnx.local"
    func_opset_imports = [onnx.helper.make_opsetid("", opset_v)]
    func_name = "Swish"
    func_inputs = ["X"]
    if with_beta:
        func_inputs.append("beta")
    func_outputs = ["Y"]
    if with_beta:
        func_nodes = get_Swish_primitive_nodes_with_beta()
    else:
        func_nodes = get_Swish_primitive_nodes()
    func_local_Swish = helper.make_function(
        func_domain,
        func_name,
        func_inputs,
        func_outputs,
        func_nodes,
        func_opset_imports,
        doc_string=docstr,
    )
    return func_local_Swish
