import torch
import torch.nn as nn
import torch.nn.functional as F

class FusedModel(nn.Module):
    def __init__(self, conv1, conv2):
        super(FusedModel, self).__init__()
        self.conv1 = conv1  # no BN fusion here (due to ReLU)
        self.conv2 = conv2  # BN already fused
        self.relu = nn.ReLU()

    def forward(self, x):
        out1 = self.relu(self.conv1(x))  # Conv1 + ReLU
        out2 = self.conv2(x)             # Conv2 (with BN fused)
        return torch.cat([out1, out2], dim=1)  # concat along channel axis

# Export the model to ONNX
model = FusedModel(conv1, conv2)  # assumes conv1, conv2 already fused/prepared
model.eval()

dummy_input = torch.randn(1, 128, 64, 64)  # example input

torch.onnx.export(
    model,
    dummy_input,
    "fused_parallel.onnx",
    input_names=["input"],
    output_names=["output"],
    opset_version=11,
    dynamic_axes={"input": {0: "batch"}, "output": {0: "batch"}}
)

print("âœ… Exported: fused_parallel.onnx")
