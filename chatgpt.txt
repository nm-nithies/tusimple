import torch
import torch.nn as nn
import torch.nn.functional as F

class ParallelConvConcatBN(nn.Module):
    def __init__(self):
        super(ParallelConvConcatBN, self).__init__()
        
        # Conv1: no bias
        self.conv1 = nn.Conv2d(128, 128, kernel_size=1, bias=False)
        
        # Conv2: with bias
        self.conv2 = nn.Conv2d(128, 128, kernel_size=3, padding=1, bias=True)
        
        # BatchNorm after concat (256 channels)
        self.bn = nn.BatchNorm2d(256)

    def forward(self, x):
        out1 = F.relu(self.conv1(x))  # ReLU after Conv1
        out2 = self.conv2(x)          # No ReLU here
        out = torch.cat([out1, out2], dim=1)
        out = self.bn(out)
        return out


# Create model and dummy input
model = ParallelConvConcatBN()
model.eval()

dummy_input = torch.randn(1, 128, 64, 64)

# Export to ONNX
torch.onnx.export(
    model,
    dummy_input,
    "parallel_conv_concat_bn.onnx",
    input_names=["input"],
    output_names=["output"],
    opset_version=11
)
print("Exported to ONNX!")
