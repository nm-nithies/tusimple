import onnx
from onnx import helper
import numpy as np
 
def modify_upsample_constants(onnx_model_path, output_model_path):
    model = onnx.load(onnx_model_path)
    graph = model.graph
    modified_tensors = {}
    for node in graph.node:
        if node.op_type == "Upsample":
            for input_name in node.input:
                for initializer in graph.initializer:
                    if initializer.name == input_name:
                        # Generate a new unique name
                        new_name = initializer.name + "_modified"
                        # Modify the tensor values
                        new_values = np.array(initializer.float_data) * np.random.uniform(1.1, 1.5, len(initializer.float_data))
                        new_tensor = helper.make_tensor(
                            new_name, initializer.data_type, initializer.dims, new_values.tolist()
                        )
                        # Replace in the model
                        graph.initializer.append(new_tensor)
                        node.input = [new_name if inp == initializer.name else inp for inp in node.input]
                        modified_tensors[initializer.name] = new_name
    onnx.save(model, output_model_path)
    print(f"Modified tensors: {modified_tensors}")
    print(f"Updated model saved to: {output_model_path}")
 
# Usage
modify_upsample_constants("input_model.onnx", "output_model.onnx")
