import onnx
import onnx.helper as helper
import onnx.numpy_helper as numpy_helper
from onnx import TensorProto

# Define input tensor
input_tensor = helper.make_tensor_value_info("input", TensorProto.FLOAT, [1, 3, 32, 32])

# Transpose (NHWC -> NCHW)
transpose1 = helper.make_node("Transpose", ["input"], ["transposed"], perm=[0, 2, 3, 1])

# Split into two outputs
split = helper.make_node("Split", ["transposed"], ["split1", "split2"], axis=1)

# Transpose operations for two branches
transpose2 = helper.make_node("Transpose", ["split1"], ["trans2"], perm=[0, 2, 3, 1])
transpose3 = helper.make_node("Transpose", ["split2"], ["trans3"], perm=[0, 2, 3, 1])

# Convolution nodes
conv1 = helper.make_node("Conv", ["trans2", "conv1_w"], ["conv1_out"])
conv2 = helper.make_node("Conv", ["trans3", "conv2_w"], ["conv2_out"])

# Clip operations
clip1 = helper.make_node("Clip", ["conv1_out"], ["clip1_out"])
clip2 = helper.make_node("Clip", ["conv2_out"], ["clip2_out"])

# Concat operation
concat = helper.make_node("Concat", ["clip1_out", "clip2_out"], ["output"], axis=1)

# Create weight tensors
conv1_w = numpy_helper.from_array(np.random.randn(8, 3, 3, 3).astype(np.float32), "conv1_w")
conv2_w = numpy_helper.from_array(np.random.randn(8, 3, 3, 3).astype(np.float32), "conv2_w")

# Define the graph
graph_def = helper.make_graph(
    [transpose1, split, transpose2, transpose3, conv1, conv2, clip1, clip2, concat],
    "Transpose-Split-Conv-Clip-Concat",
    [input_tensor],
    [helper.make_tensor_value_info("output", TensorProto.FLOAT, [1, 16, 30, 30])],
    [conv1_w, conv2_w]
)

# Define the model
model_def = helper.make_model(graph_def, producer_name="onnx-model")
onnx.save(model_def, "model.onnx")
print("ONNX model saved as model.onnx")
