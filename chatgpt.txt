import onnx
import numpy as np
from onnx import helper, TensorProto

def get_SpaceToDepth_primitive_nodes():
    nodes = [
        # Constant node for shape1
        helper.make_node(
            "Constant",
            inputs=[],
            outputs=["shape1"],
            value=helper.make_tensor("shape1", TensorProto.INT64, [6], np.array([1, 3, 208, 2, -1, 2], dtype=np.int64))
        ),
        # Reshape with shape1
        helper.make_node("Reshape", ["X", "shape1"], ["reshape1_out"]),

        # Transpose operation
        helper.make_node("Transpose", ["reshape1_out"], ["transpose_out"], perm=(0, 5, 3, 1, 2, 4)),

        # Constant node for shape2
        helper.make_node(
            "Constant",
            inputs=[],
            outputs=["shape2"],
            value=helper.make_tensor("shape2", TensorProto.INT64, [4], np.array([1, 12, 208, 208], dtype=np.int64))
        ),
        # Reshape with shape2
        helper.make_node("Reshape", ["transpose_out", "shape2"], ["Y"]),
    ]
    return nodes

def get_local_function_SpaceToDepth(opset_v=13):
    docstr = "SpaceToDepth(mode = DCR) implemented by ONNX local function."
    func_domain = "snps.onnx.local"
    func_opset_imports = [onnx.helper.make_opsetid("", opset_v)]
    func_name = "SpaceToDepth"

    func_inputs = ["X"]
    func_outputs = ["Y"]
    func_nodes = get_SpaceToDepth_primitive_nodes()

    # Create ONNX function
    func_local_SpaceToDepth = helper.make_function(
        func_domain,
        func_name,
        func_inputs,
        func_outputs,
        func_nodes,
        func_opset_imports,
        doc_string=docstr
    )
    
    return func_local_SpaceToDepth
