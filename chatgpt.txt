import onnx
import numpy as np
from onnx import helper, numpy_helper

# Load ONNX model
model_path = "your_model.onnx"
model = onnx.load(model_path)

# Define default values
roi_value = np.array([0, 0, 0, 0], dtype=np.float32)
scales_value = np.array([1.0, 1.0, 2.0, 2.0], dtype=np.float32)

# Create tensors for roi and scales
roi_tensor = helper.make_tensor(
    name="default_roi",
    data_type=onnx.TensorProto.FLOAT,
    dims=roi_value.shape,
    vals=roi_value.flatten()
)

scales_tensor = helper.make_tensor(
    name="default_scales",
    data_type=onnx.TensorProto.FLOAT,
    dims=scales_value.shape,
    vals=scales_value.flatten()
)

# Find the Resize node and update its inputs
for node in model.graph.node:
    if node.op_type == "Resize":
        print(f"Modifying Resize Node: {node.name}")

        # Replace empty roi and scales with default values
        if "537" in node.input:  # Replace `roi`
            node.input[node.input.index("537")] = "default_roi"
        if "545" in node.input:  # Replace `scales`
            node.input[node.input.index("545")] = "default_scales"

# Add tensors to the model graph
model.graph.initializer.append(roi_tensor)
model.graph.initializer.append(scales_tensor)

# Save modified ONNX model
onnx.save(model, "modified_model.onnx")

print("Successfully set default values for roi and scales!")
